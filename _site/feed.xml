<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bryancy Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 19 Sep 2017 15:06:44 +0800</pubDate>
    <lastBuildDate>Tue, 19 Sep 2017 15:06:44 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>python字符编码和字符串</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;背景：我司代码都是基于python2&lt;/p&gt;

&lt;p&gt;今天接到一个需求，三方登录时，对第三方的昵称如果大于20个字符，进行过滤截取，毫不迟疑，写了以下代码：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 截取&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我转念一想，事情不大对，我这算的是字符数（这个表述是正确的，是字符）啊&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 等于4&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I love python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 等于13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的例子显而易见，小学生水平，再看下面的&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;我爱北京天安门&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 等于21&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&quot;我爱北京天安门&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 等于7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实我想要的是下面这个，但是我在代码里直接那么写，我操作的字符串前面到底有没有u呢，这个u我知道是unicode字符串，它和没有u的字符串到底区别在哪里？&lt;/p&gt;

&lt;p&gt;几年前我曾经下决心弄懂这个问题，可能当时也确实明白了，但是现在差不多已经全忘了。我自己总结了一下，一是之前一直是用python3，python3做了一些修改。二是这个问题确实不应该交给程序员来解决（我承认我的记性确实不好）。&lt;/p&gt;

&lt;p&gt;然而，旧的系统那么多，难保你下次跳槽的公司没有一些上了年纪的代码，我们还是来梳理一下吧。&lt;/p&gt;

&lt;h2 id=&quot;字符与字节&quot;&gt;字符与字节&lt;/h2&gt;

&lt;p&gt;一个字符不等价于一个字节，字符是人类能够识别的符号，而这些符号要保存到计算机的存储中就需要用计算机能够识别的字节来表示。一个字符往往有多种表示方法，不同的表示方法会使用不同的字节数。这里所说的不同的表示方法就是指字符编码，比如字母A-Z都可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;码表示（占用一个字节），也可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;UNICODE&lt;/code&gt;表示（占两个字节），还可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;表示（占用一个字节）。字符编码的作用就是将人类可识别的字符转换为机器可识别的字节码，以及反向过程。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNICDOE&lt;/code&gt;才是真正的字符串，而用ASCII、UTF-8、GBK等字符编码表示的是字节串。关于这点，我们可以在Python的官方文档中经常可以看到这样的描述&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“Unicode string” , “translating a Unicode string into a sequence of bytes”。
&lt;br /&gt;（注意：英文中string是我们说的字符串，bytes是字节串）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们写&lt;code class=&quot;highlighter-rouge&quot;&gt;代码&lt;/code&gt;是写在&lt;code class=&quot;highlighter-rouge&quot;&gt;文件&lt;/code&gt;中的，而&lt;code class=&quot;highlighter-rouge&quot;&gt;字符&lt;/code&gt;是以&lt;code class=&quot;highlighter-rouge&quot;&gt;字节&lt;/code&gt;形式保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;文件&lt;/code&gt;中的，因此当我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;文件&lt;/code&gt;中定义个&lt;code class=&quot;highlighter-rouge&quot;&gt;字符串&lt;/code&gt;时被当做&lt;code class=&quot;highlighter-rouge&quot;&gt;字节串&lt;/code&gt;也是可以理解的。但是，我们需要的是&lt;code class=&quot;highlighter-rouge&quot;&gt;字符串&lt;/code&gt;，而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;字节串&lt;/code&gt;（我们写代码处理的是我们能想象的数据，也就是字符串，应该不会有人想象字节串吧）。一个优秀的编程语言，应该严格区分两者的关系并提供巧妙的完美的支持。JAVA语言就很好，我认识的JAVA程序员从来没有考虑过这些不应该由程序员来处理的问题（我一直这么认为）。遗憾的是，很多编程语言试图混淆&lt;code class=&quot;highlighter-rouge&quot;&gt;“字符串”&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;“字节串”&lt;/code&gt;，他们把字节串当做字符串来使用，PHP和Python2都属于这种编程语言。最能说明这个问题的操作就是取一个包含中文字符的字符串的长度：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对&lt;code class=&quot;highlighter-rouge&quot;&gt;字符串&lt;/code&gt;取长度，结果应该是所有&lt;code class=&quot;highlighter-rouge&quot;&gt;字符&lt;/code&gt;的个数，无论中文还是英文&lt;/li&gt;
  &lt;li&gt;对&lt;code class=&quot;highlighter-rouge&quot;&gt;字符串&lt;/code&gt;对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;字节串&lt;/code&gt;取长度，就跟编码(encode)过程使用的字符编码有关了(比如：UTF-8编码，一个中文字符需要用3个字节来表示；GBK编码，一个中文字符需要2个&lt;code class=&quot;highlighter-rouge&quot;&gt;字节&lt;/code&gt;来表示)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-ipython&quot;&gt;In [8]: a = u&quot;中国&quot;
In [9]: print len(a), type(a)
2 &amp;lt;type 'unicode'&amp;gt;

In [10]: b = a.encode('utf-8')
In [11]: print len(b), type(b)
6 &amp;lt;type 'str'&amp;gt;

In [12]: c = a.encode('gbk')
In [13]: print len(c), type(c)
4 &amp;lt;type 'str'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;编码与解码&quot;&gt;编码与解码&lt;/h2&gt;

&lt;p&gt;UNICODE字符编码，也是一张字符与数字的映射，但是这里的数字被称为代码点(code point), 实际上就是十六进制的数字。&lt;/p&gt;

&lt;p&gt;Python官方文档中对Unicode字符串、字节串与编码之间的关系有这样一段描述：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;a Unicode string is a sequence of code points, which are numbers from 0 to 0x10ffff.&lt;br /&gt;
This sequence needs to be represented as a set of bytes (meaning, values from 0–255) in memory.&lt;br /&gt;
The rules for translating a Unicode string into a sequence of bytes are called an encoding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unicode字符串是一个代码点（code point）序列，代码点取值范围为0到0x10FFFF（对应的十进制为1114111。&lt;br /&gt;
这个代码点序列在存储（包括内存和物理磁盘）中需要被表示为一组字节(0到255之间的值)，&lt;br /&gt;
而将Unicode字符串转换为字节序列的规则称为编码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里说的编码不是指字符编码，而是指:&lt;strong&gt;编码的过程以及这个过程中所使用到的Unicode字符的代码点与字节的映射规则&lt;/strong&gt;。
这个映射不必是简单的一对一映射，因此编码过程也不必处理每个可能的Unicode字符，例如：&lt;/p&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;字符串转换为&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;编码的规则很简单–对于每个代码点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果代码点数值&amp;lt;128，则每个字节与代码点的值相同&lt;/li&gt;
  &lt;li&gt;如果代码点数值&amp;gt;=128，则&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;字符无法在此编码中进行表示（这种情况下，Python会引发一个&lt;code class=&quot;highlighter-rouge&quot;&gt;UnicodeEncodeError&lt;/code&gt;异常）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;字符串转换为&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码使用以下规则：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果代码点数值&amp;lt;128，则由相应的字节值表示（与Unicode转ASCII字节一样）&lt;/li&gt;
  &lt;li&gt;如果代码点数值&amp;gt;=128，则将其转换为一个2个字节，3个字节或4个字节的序列，该序列中的每个字节都在128到255之间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单总结：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;编码(encode)：将&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;字符串（中的代码点)转换特定字符编码对应的字节串的过程和规则&lt;/li&gt;
  &lt;li&gt;解码(decode)：将特定字符编码的字节串转换为对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;字符串(中的代码点)的过程和规则&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可见，无论是编码还是解码，都需要一个重要因素，就是特定的字符编码。因为一个字符用不同的字符编码进行编码后的字节值以及字节个数大部分情况下是不同的，反之亦然。&lt;/p&gt;

&lt;p&gt;而且很容易看到，编码和解码都是基于Unicode字符串，没有第二种字符串掺和，其他都是编码方式，一定要深刻地认识到这一点&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 01:21:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/12/character_encoding/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/12/character_encoding/</guid>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>ansible - 简单的自动化IT工具</title>
        <description>&lt;h2 id=&quot;安装和配置&quot;&gt;安装和配置&lt;/h2&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pip install ansible&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;创建并编辑ansible的hosts文件内容为已经配置ssh免密码登录的远程主机的地址&quot;&gt;创建并编辑ansible的hosts文件，内容为已经配置ssh免密码登录的远程主机的地址。&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h6 id=&quot;创建并编辑ansible的hosts文件&quot;&gt;创建并编辑ansible的hosts文件&lt;/h6&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# /etc/ansible/hosts是默认路径&lt;/span&gt;
  sudo mkdir /etc/ansible
  sudo vi /etc/ansible/hosts
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h6 id=&quot;内容为ini格式&quot;&gt;内容为INI格式：&lt;/h6&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  192.168.1.112
  192.168.1.113
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h6 id=&quot;也可以进行分组同一个机器可以在不同分组&quot;&gt;也可以进行分组，同一个机器可以在不同分组&lt;/h6&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;v1]
  192.168.1.112

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;v2]
  192.168.1.113
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;注：如果远程的ssh端口修改了不在22标准端口，文件内容中机器地址应该明确指定端口号如：192.168.1.112:2223&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;准备工作&quot;&gt;准备工作&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h6 id=&quot;配置ssh免密码登录远程主机&quot;&gt;配置ssh免密码登录远程主机&lt;/h6&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# 当前用户名与远程机器上相同，ssh key在默认位置&lt;/span&gt;
  ssh-copy-id 192.168.1.112
  ssh-copy-id 192.168.1.113
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h6 id=&quot;避免重复输入密钥的短语密码&quot;&gt;避免重复输入密钥的短语密码：&lt;/h6&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h6 id=&quot;在本地测试是否能够ping通&quot;&gt;在本地测试是否能够ping通：&lt;/h6&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# ping全部机器 ansible all -m ping&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# 以bryan用户身份ping .112&lt;/span&gt;
  ansible 192.168.1.112 -m ping -u bryan

  &lt;span class=&quot;c&quot;&gt;# 以用户bryan身份使用sudo来ping v1 (.112)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# -K是输入root密码&lt;/span&gt;
  ansible v1 -m ping -u bryan --sudo -K
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;配置-定义自己的配置文件&quot;&gt;配置 &lt;a href=&quot;https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg&quot;&gt;定义自己的配置文件&lt;/a&gt;&lt;/h4&gt;
&lt;h6 id=&quot;配置文件可以从多个地方加载其优先级顺序为&quot;&gt;配置文件可以从多个地方加载，其优先级顺序为&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;ANSIBLE_CONFIG (环境变量)&lt;/li&gt;
  &lt;li&gt;ansible.cfg (当前目录)&lt;/li&gt;
  &lt;li&gt;.ansible.cfg (home目录)&lt;/li&gt;
  &lt;li&gt;/etc/ansible/ansible.cfg&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ssh检查key是通过paramiko进行的很慢-不检查host-key配置&quot;&gt;ssh检查key是通过paramiko进行的，很慢。 不检查host key配置&lt;/h6&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi etc/ansible/ansible.cfg
&lt;span class=&quot;c&quot;&gt;# or ~/.ansible.cfg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;内容为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[defaults]
host_key_checking = False
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;用法&quot;&gt;用法&lt;/h2&gt;

&lt;h4 id=&quot;pattern&quot;&gt;Pattern:&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible &amp;lt;pattern_goes_here&amp;gt; -m &amp;lt;module_name&amp;gt; -a &amp;lt;arguments&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;pattern可以直接指定某一机器地址或hosts中的组名同时指定多个组或者多个ip使用分割&quot;&gt;pattern可以直接指定某一机器地址或hosts中的组名，同时指定多个组或者多个ip使用:分割：&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;one.example.com
one.example.com:two.example.com
192.168.1.136
v1
v1:v2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;也可以用all或&quot;&gt;也可以用all或&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;all
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
192.168.1.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;用表示非&quot;&gt;用!表示非：&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v1:!v2   #表示在v1分组中，但是不在v2中的hosts&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;用表示交集部分&quot;&gt;用&amp;amp;表示交集部分：&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webservers:&amp;amp;dbservers  #表示在webservers分组中，同时也在dbservers分组中的hosts:w&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;可以指定分组的下标或切片超过范围则无法匹配&quot;&gt;可以指定分组的下标或切片(超过范围则无法匹配)：&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v1[0]
v1[0:100]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;也可以用开头来使用正则&quot;&gt;也可以用~开头来使用正则：&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;web|db&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;example&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;com
~v&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;注需要注意的是如果用的是zsh有这些类似于等这些特殊符号需要用单引号包裹&quot;&gt;注：需要注意的是如果用的是zsh，有这些类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;*，!，[&lt;/code&gt;等这些特殊符号需要用单引号包裹。&lt;/h6&gt;

&lt;h4 id=&quot;执行ad-hoc命令就是无需保存的快速执行shell命令&quot;&gt;执行Ad-Hoc命令(就是无需保存的快速执行shell命令)&lt;/h4&gt;
&lt;h6 id=&quot;使用-a指定命令--f指定并发数默认为5--m是选择使用的模块&quot;&gt;使用-a指定命令， -f指定并发数（默认为5）, -m是选择使用的模块：&lt;/h6&gt;

&lt;h5 id=&quot;执行shell&quot;&gt;执行shell&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 打印hello&lt;/span&gt;
ansible all -a &lt;span class=&quot;s2&quot;&gt;&quot;/bin/echo hello&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重启&lt;/span&gt;
ansible all -a &lt;span class=&quot;s2&quot;&gt;&quot;/sbin/reboot&quot;&lt;/span&gt; -f 10 --sudo -K

&lt;span class=&quot;c&quot;&gt;# 使用shell模块 注意当前shell的引号问题&lt;/span&gt;
ansible all -m shell -a &lt;span class=&quot;s1&quot;&gt;'ls -al ~'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;文件操作&quot;&gt;文件操作&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 传输文件&lt;/span&gt;
ansible all -m copy -a &lt;span class=&quot;s2&quot;&gt;&quot;src=~/projects/tests/t.py dest=~&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改文件权限，所有者，分组（这些参数可以用在copy模块中）&lt;/span&gt;
ansible all -m file -a &lt;span class=&quot;s2&quot;&gt;&quot;dest=~/t.py mode=777 owner=bryan group=bryan&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 创建文件夹&lt;/span&gt;
ansible all -m file -a &lt;span class=&quot;s2&quot;&gt;&quot;dest=~/tests mode=755 owner=bryan group=bryan state=directory&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 删除文件夹&lt;/span&gt;
ansible all -m file -a &lt;span class=&quot;s2&quot;&gt;&quot;dest=~/tests state=absent&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;安装软件&quot;&gt;安装软件&lt;/h5&gt;
&lt;h6 id=&quot;使用yum或apt模块可以进行软件的安装&quot;&gt;使用yum或apt模块可以进行软件的安装&lt;/h6&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确保某个程序已经安装，并保持当前版本，如果没安装则进行安装&lt;/span&gt;
ansible v1 -m apt -a &lt;span class=&quot;s2&quot;&gt;&quot;name=python-pip state=present&quot;&lt;/span&gt; --sudo -K

&lt;span class=&quot;c&quot;&gt;# 确保安装最新版本&lt;/span&gt;
ansible v1 -m apt -a &lt;span class=&quot;s2&quot;&gt;&quot;name=git state=latest&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 确保没有安装某个程序，安装了则卸载&lt;/span&gt;
ansible v1 -m apt -a &lt;span class=&quot;s2&quot;&gt;&quot;name=git state=absent&quot;&lt;/span&gt; --sudo -K
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;用户管理&quot;&gt;用户管理&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 新建用户&lt;/span&gt;
ansible all -m user -a &lt;span class=&quot;s2&quot;&gt;&quot;name=foo password=foo&quot;&lt;/span&gt; --sudo -K

&lt;span class=&quot;c&quot;&gt;# 删除用户&lt;/span&gt;
ansible all -m user -a &lt;span class=&quot;s2&quot;&gt;&quot;name=foo state=absent&quot;&lt;/span&gt; --sudo -K
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;git&quot;&gt;Git&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 使用https方式检出代码到本地，前提是要先通过apt模块安装git&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# dest目录必须是空文件夹或者还不存在的文件夹&lt;/span&gt;

ansible v1 -m git -a &lt;span class=&quot;s2&quot;&gt;&quot;repo=https://github.com/bryancy/macvim.git dest=~/project-dir version=HEAD&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;服务管理&quot;&gt;服务管理&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确保某服务已开启，没开则开&lt;/span&gt;
ansible v1 -m service -a &lt;span class=&quot;s2&quot;&gt;&quot;name=mysql state=started&quot;&lt;/span&gt; --sudo -K
ansible v1 -m service -a &lt;span class=&quot;s2&quot;&gt;&quot;name=mysql state=restarted&quot;&lt;/span&gt; --sudo -K
ansible v1 -m service -a &lt;span class=&quot;s2&quot;&gt;&quot;name=mysql state=stopped&quot;&lt;/span&gt; --sudo -K
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;playbooks&quot;&gt;Playbooks&lt;/h4&gt;
&lt;h6 id=&quot;yaml语法&quot;&gt;YAML语法&lt;/h6&gt;

&lt;p&gt;playbooks使用yaml语法，在ansible中几乎所有的yaml文件都是以list开始，每个item是键值对的list。&lt;/p&gt;

&lt;p&gt;所有的yaml文件都以—开头表示开始一个document，所有的列表元素以-开头，键值对用:，后面的空格是必须的。（如果官网文档中有指出空格那一定是merge了我的pull request&lt;code class=&quot;highlighter-rouge&quot;&gt;^_^&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;键值对中的值如果是bool类型的字符串true/false（首字母不论大小写），pyyaml会load成python中对应的bool值，在键值对中如果值中有&lt;b&gt;:&lt;/b&gt;
或者以&lt;b&gt;{{&lt;/b&gt;开头的变量定义，则必须用引号引起来&lt;/p&gt;

&lt;h6 id=&quot;ping示例&quot;&gt;ping示例&lt;/h6&gt;

&lt;p&gt;新建文件test.yml内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;---
- hosts: v1
  remote_user: bryan
  tasks:
    - name: test connection
      ping:
        remote_user: bryan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行：
&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible-playbook test.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一个playbook文件可以引入其他的yml文件，实现复用。&lt;code class=&quot;highlighter-rouge&quot;&gt;- include: path/other.yml&lt;/code&gt;&lt;/p&gt;

&lt;h6 id=&quot;roles&quot;&gt;roles&lt;/h6&gt;
&lt;p&gt;使用roles可以更好的组织框架，简单例子：&lt;/p&gt;

&lt;p&gt;当前目录结构：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── hosts
├── roles
│   └── common
│       └── tasks
│           └── main.yml
└── site.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;site.yml文件是入口，内容为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;---
- hosts: all
  roles:
    - role: common

- hosts: v1
  tasks:
    - include: roles/common/tasks/main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;commom角色是用于在全部主机上执行的任务，任务为ping，tasks中文件名必须为main，其内容为&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test connection&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;ping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;v1角色是通过include直接指定task。运行
&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible-playbook site.yml -vv&lt;/code&gt;
应该就能看到返回结果。&lt;/p&gt;

&lt;p&gt;role下有很多结构，ansible会自动按照文件结构进行加载解析。具体目录结构如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── defaults
├── files
├── handlers
├── meta
├── tasks
├── templates
└── vars
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;roles/x/tasks/main.yml&lt;/code&gt;存在,则自动将里面的tasks添加到play中。&lt;/p&gt;

&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;roles/x/handlers/main.yml&lt;/code&gt;存在,则自动将里面的handlers添加到play中。&lt;/p&gt;

&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;roles/x/vars/main.yml&lt;/code&gt;存在, 则自动将其中的variables添加到play中。&lt;/p&gt;

&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;roles/x/meta/main.yml&lt;/code&gt;存在,则添加role的依赖关系roles中。&lt;/p&gt;

&lt;p&gt;任何copy任务、script任务都可以引用&lt;code class=&quot;highlighter-rouge&quot;&gt;roles/x/files&lt;/code&gt;中的文件，无论是使用绝对或相对路径都可以。&lt;/p&gt;

&lt;p&gt;任何template任务都可以引用&lt;code class=&quot;highlighter-rouge&quot;&gt;roles/x/templates&lt;/code&gt;中的文件，无论绝对或相对路径。&lt;/p&gt;

&lt;p&gt;任何include任务都可以引用&lt;code class=&quot;highlighter-rouge&quot;&gt;roles/x/tasks/&lt;/code&gt;中的文件，无论相对或绝对路径&lt;/p&gt;

&lt;p&gt;具体可以参见&lt;a href=&quot;http://docs.ansible.com/playbooks_intro.html&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;变量&quot;&gt;变量&lt;/h6&gt;

&lt;p&gt;变量使用jinja语法。默认就有很多保留变量。自定义的变量通过vars直接以键值对方式定义，也可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vars_files&lt;/code&gt;以列表方式指定保存定义变量的文件。也可以通过命令行使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--extra-vars&lt;/code&gt;参数指定&lt;/p&gt;

&lt;p&gt;全局的变量放在&lt;code class=&quot;highlighter-rouge&quot;&gt;group_vars/all&lt;/code&gt;中，局部变量放在&lt;code class=&quot;highlighter-rouge&quot;&gt;group_vars/x&lt;/code&gt;中，特定的host使用特定的变量可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;host_vars/x&lt;/code&gt;，子group中的变量会覆盖上级变量，hosts变量总是覆盖groups变量&lt;/p&gt;

&lt;p&gt;可以用playbook打印下变量：&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo&lt;/span&gt; 
      &lt;span class=&quot;s&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ansible_os_family == &quot;Debian&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;运行：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible-playbook echo.yml -vv&lt;/code&gt;
具体见&lt;a href=&quot;http://docs.ansible.com/playbooks_variables.html&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Sep 2017 21:15:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/11/ansible/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/11/ansible/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>集群管理利器-polysh</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在没有集成日志的情况下，想同时查看多台机器的日志目前知道的最好用的方法是使用polysh。它可以通过本地机器在远程同时执行命令，并显示结果。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://guichaz.free.fr/polysh/&quot;&gt;polysh主页&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pip install polysh&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;用法&quot;&gt;用法&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在多台机器执行同一命令
&lt;img src=&quot;/img/in-post/post-cluster-20170911/ref.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在本地集中打印日志
&lt;img src=&quot;/img/in-post/post-cluster-20170911/ref2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 11 Sep 2017 19:40:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/11/cluster-management/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/11/cluster-management/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Bryancy Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Bryancy 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一直想找个地方好好写点东西，现在终于有了！&lt;/p&gt;

&lt;p&gt;作为一个程序员， Blog 这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog 服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写 Blog 的地儿都没有。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。&lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本来觉得最大的缺点可能是 GitHub 在国内访问起来太慢，所以第二天一起床就到 GitCafe(Chinese GitHub Copy) 迁移了一个&lt;a href=&quot;http://huxpro.gitcafe.io&quot;&gt;镜像&lt;/a&gt;出来，结果还是巨慢。&lt;/p&gt;

&lt;p&gt;果断开 Chrome DevTool 查了下网络请求，原来是 &lt;strong&gt;pending 在了 Google Fonts&lt;/strong&gt; 上，页面渲染一直被阻塞到请求超时为止，难怪这么慢。
忍痛割爱，只好把 Web Fonts 去了（反正超时看到的也只能是 fallback ），果然一下就正常了，而且 GitHub 和 GitCafe 对比并没有感受到明显的速度差异，虽然 github 的 ping 值明显要高一些，达到了 300ms，于是用 DNSPOD 优化了一下速度。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手&lt;/p&gt;

&lt;p&gt;大的 Jekyll 主题上直接 fork 了 Clean Blog（这个主题也相当有名，就不多赘述了。唯一的缺点大概就是没有标签支持，于是我给它补上了。）&lt;/p&gt;

&lt;p&gt;本地调试环境需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功&lt;/p&gt;

&lt;p&gt;Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了（平时更习惯 SCSS 些），&lt;strong&gt;不过其实我一直觉得 Bootstrap 在移动端的体验做得相当一般，比我在淘宝参与的团队 CSS 框架差多了……&lt;/strong&gt;所以为了体验，也补了不少 CSS 进去&lt;/p&gt;

&lt;p&gt;最后就进入了耗时反而最长的&lt;strong&gt;做图、写字&lt;/strong&gt;阶段，也算是进入了&lt;strong&gt;写博客&lt;/strong&gt;的正轨，因为是类似 Hack Day 的方式去搭这个站的，所以折腾折腾着大半夜就过去了。&lt;/p&gt;

&lt;p&gt;第二天考虑中文字体的渲染，fork 了 &lt;a href=&quot;http://www.typeisbeautiful.com/&quot;&gt;Type is Beautiful&lt;/a&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;font&lt;/code&gt; CSS，调整了字号，适配了 Win 的渣渲染，中英文混排效果好多了。&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Sep 2017 02:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/10/hello-world/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/10/hello-world/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
